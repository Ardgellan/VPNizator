import asyncio
import aiohttp
from aiogram import types
from aiogram.dispatcher import FSMContext

from loguru import logger
from loader import db_manager

async def cleanup_all_servers(call: types.CallbackQuery):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –æ—Ç –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω—Å–∫—É—é –∫–Ω–æ–ø–∫—É (Nginx-–ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ).
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ UUID, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º
        domain_to_uuids = await db_manager.get_all_configs_grouped_by_domain()

        async with aiohttp.ClientSession() as session:
            tasks = []

            for domain, uuids in domain_to_uuids.items():
                url = f"https://proxynode.vpnizator.online/cleanup_configs/{domain}/"
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—á–∏—Å—Ç–∫—É {domain}. –í—Å–µ–≥–æ UUID: {len(uuids)}")

                task = session.delete(url, json={"valid_uuids": uuids})
                tasks.append(task)

            responses = await asyncio.gather(*tasks, return_exceptions=True)

            for domain, response in zip(domain_to_uuids.keys(), responses):
                if isinstance(response, Exception):
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ {domain}: {response}")
                else:
                    result = await response.json()
                    if response.status == 200:
                        logger.info(f"–û—á–∏—Å—Ç–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ {domain} –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ: {result}")
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ {domain}: {result}")

        summary_message = (
            f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"üîπ –£—Å–ø–µ—à–Ω—ã—Ö: {success_count}\n"
            f"üî∏ –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed_count}"
        )

        logger.info(summary_message)
        await call.message.answer(summary_message)

    except Exception as e:
        error_message = f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–µ—Ä–≤–µ—Ä–æ–≤: {str(e)}"
        logger.error(error_message)
        await callback_query.message.answer(error_message)